#
# Copyright (c) 2003 by Asko Soukka
# Copyright (c) 2003-2004 by Benja Fallenstein
# 
# This is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General
# Public License along with this file; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
# 

#
# Written by Asko Soukka
#

"""
This module is dependent on papers generated by a script in Libvob CVS.
"""

import os.path
import re
import sha

def dbg(s):
    print '[add_texture]', s

def postprocess(path=''):
    """
    HTML postprocessing function.
    """
    
    dbg("POSTPROCESS %s" % path)
    
    dirlist = []
    if (os.path.isfile(path)): embed_procedural_texture(path)
    else:
        if path != '': dirlist = os.listdir(path)
        else:          dirlist = os.listdir('.')

    for entry in dirlist:
        if entry == '_darcs':
            continue
        
        epath = os.path.join(path, entry)
        
        if os.path.isdir(epath) and not os.path.islink(epath):
            postprocess(epath)

        elif os.path.isfile(epath) and entry.endswith('.html'):
            embed_procedural_texture(epath)

def get_texture_filename(filepath):

    if filepath.endswith('.html'):
        rstpath = os.path.splitext(filepath)[0]+'.rst'
        if os.path.isfile(rstpath): filepath = rstpath
    else:
        assert 0

    if os.path.isfile(rstpath+'.texgenid'):
        id = long(open(rstpath+'.texgenid').read())
    else:
        return None

    return 'papers/'+str(id)+'-paper.gen.jpg'


def relative_path(file, target):
    file = os.path.normpath(file)
    n = len([c for c in file if c=='/'])
    # add_navbar.py needs the following line
    if n==0 and target == '': return '.'
    path = '/'.join((['..']*n))
    return os.path.join(path, target)


def embed_procedural_texture(filepath):
    working_directory = os.path.normpath(os.path.dirname(filepath))
    input_filename = os.path.basename(filepath)
    output_filename = os.path.basename(filepath)

    texture_filepath = get_texture_filename(filepath)

    if texture_filepath == None:
        dbg('%s.texgenid does not exist; skip.' % filepath)
        return
        
    if not os.path.isfile(texture_filepath):
        dbg('Texture %s for %s not found.' % (texture_filepath, filepath))
        return
        
    htmlfile = open(filepath)
    html = htmlfile.read()
    htmlfile.close()

    insert = html.upper().find('</HEAD>')

    s = """
<style type="text/css">
<!--
body {background-image:url(%s); background-repeat: repeat}
-->
</style>
""" % (relative_path(filepath, texture_filepath))

    if insert != -1 and html.find(s) == -1:
        out = open(filepath, "w")            
        out.write(html[:insert]);
        out.write(s)
        out.write(html[insert:])
        out.close()

        dbg('Texture %s embedded into %s.' % (texture_filepath, filepath))


if __name__ == '__main__':
    postprocess()
